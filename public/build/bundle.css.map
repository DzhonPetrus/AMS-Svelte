{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<style>\n  *{\n    margin-left:150px;\n    font-family: arial, sans-serif;\n  }\ntable {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 80%;\n  margin-left:10%;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n\ntr:nth-child(even) {\n  background-color: #dddddd;\n}\n\n.invalid {background:rgba(255,0,0,.8);}\n.valid {background:rgba(0,255,0,.8);}\n</style>\n\n<svelte:head><title>{title}</title></svelte:head>\n\n<script>\n  export let title;\n  import {onMount} from 'svelte';\n  let user = {}\n  let users = [];\n  let state = 'ADD';\n  let exist = false;\n  let search = '';\n  /* $: filteredUser = users.filter(u => u._Username == search); */\n  $: filteredUser = users.filter(u => u._Username.indexOf(search) != -1);\n\n  const userGetAll = async () => {\n    clearUser();\n    let res = await fetch('http://localhost:3000/api/user');\n    users = await res.json();\n  };\n\n  const userAdd = async () => {\n    if(user._Username == '' || user._Password == '')\n      return alert(`Please fill out form.`);\n\n    let res = await fetch('http://localhost:3000/api/user', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(user),\n    });\n    let result = await res.json();\n\n    users = [...users, user];\n\n    console.log(`New user ${user._Username} aded.`);\n    alert(`New user ${user._Username} aded.`);\n    clearUser();\n\n  };\n  const userEdit = (u) => {\n    state = 'EDIT';\n    user = u;\n  };\n  const userUpdate = async () => {\n    let ans = confirm(`Are you sure you want to update ${user._Username}?`);\n    if(!ans)\n      return alert(`Update cancelled.`);\n\n    let res = await fetch(`http://localhost:3000/api/user/`, {\n      method: 'PATCH',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(user),\n    });\n    let result = await res.json();\n\n    let index = users.findIndex(u => u.ID == user.ID);\n    users[index] = user;\n    console.log(`User '${user._Username}' updated!`);\n    alert(`User '${user._Username}' updated!`);\n    back();\n  };\n  const userDelete = async () => {\n    let ans = confirm(`Are you sure you want to delete '${user._Username}'?`);\n    if(!ans)\n      return alert(`Deletion cancelled.`);\n\n    let res = await fetch(`http://localhost:3000/api/user/${user.ID}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(user),\n    });\n    let result = await res.json();\n\n    users = users.filter(u => u.ID != user.ID);\n    console.log(`User '${user._Username}' deleted!`);\n    alert(`User '${user._Username}' deleted!`);\n    clearUser();\n  };\n\n  const userExist = async () => {\n    let userExist = users.filter(u => u._Username == user._Username);\n    if(userExist.length == 0)\n      exist = false;\n    else\n      exist = true;\n  };\n\n  const back = () => {\n    clearUser();\n    state = 'ADD';\n  };\n\n  const clearUser = () => {\n    user= {\n      _Username : '',\n      _Password : '',\n      StudentNo: '',\n      isActive: true,\n\n    }\n  };\n\n  onMount(() => userGetAll());\n</script>\n\n\n<h1>USERS</h1>\n<form >\n  <label for=\"_Username\" id=\"_Username\">Username</label>\n  <input type=\"text\" id=\"_Username\" placeholder=\"Username\" bind:value={user._Username} on:input={userExist} class={exist && state=='ADD' ? 'invalid' : 'valid'}>\n  <label for=\"_Password\">Password</label>\n  <input type=\"password\" id=\"_Password\" placeholder=\"Password\" bind:value={user._Password}>\n  <label for=\"StudentNo\">StudentNo</label>\n  <input type=\"text\" id=\"StudentNo\" placeholder=\"StudentNo\" bind:value={user.StudentNo}>\n    <label for=\"isActive\">Active</label>\n    <input type=\"checkbox\" id=\"isActive\" bind:checked={user.isActive}>\n    <br>\n  {#if state == 'ADD'}\n    <button on:click|preventDefault={userAdd}>ADD</button>\n  {:else}\n\n    <button on:click|preventDefault={userUpdate}>UPDATE</button>\n    <button on:click|preventDefault={userDelete}>DELETE</button>\n    <button on:click|preventDefault={back}>BACK</button>\n  {/if}\n</form>\n\n<ul>\n  <li>Username: {user._Username}</li>\n  <li>Password: {user._Password}</li>\n  <li>Student No: {user.StudentNo}</li>\n  <li>isActive: {user.isActive}</li>\n  <br>\n  <li>COUNT: {users.length}</li>\n</ul>\n\n<input type=\"text\" bind:value={search} placeholder=\"Search by Username\">\n<table>\n  <tr>\n    <th>Username</th>\n    <th>Password</th>\n    <th>Student No</th>\n    <th>isActive</th>\n    <th>Action</th>\n  </tr>\n  {#if users.length == 0}\n  <tr>\n    <th colspan=\"5\"><center>NO DATA</center></th>\n  </tr>\n  {:else}\n    {#each (search == '' ? users : filteredUser) as u}\n      <tr>\n        <td>{u._Username}</td>\n        <td>{u._Password }</td>\n        <td>{u.StudentNo == '' ? null : u.StudentNo}</td>\n        <td>{u.isActive ? 'true' : 'false'}</td>\n        <td><button on:click|preventDefault={userEdit(u)}>EDIT</button></td>\n      </tr>\n    {/each}\n  {/if}\n</table>\n<h3>X</h3>\n"
  ],
  "names": [],
  "mappings": "AACE,eAAC,CAAC,AACA,YAAY,KAAK,CACjB,WAAW,CAAE,KAAK,CAAC,CAAC,UAAU,AAChC,CAAC,AACH,KAAK,eAAC,CAAC,AACL,WAAW,CAAE,KAAK,CAAC,CAAC,UAAU,CAC9B,eAAe,CAAE,QAAQ,CACzB,KAAK,CAAE,GAAG,CACV,YAAY,GAAG,AACjB,CAAC,AAED,iBAAE,CAAE,EAAE,eAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,GAAG,AACd,CAAC,AAED,iBAAE,WAAW,IAAI,CAAC,AAAC,CAAC,AAClB,CAAC,eAAe,CAAE,OAAO,AAC3B,CAAC,AAED,QAAQ,eAAC,CAAC,WAAW,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,AAAC,CAAC,AACvC,MAAM,eAAC,CAAC,WAAW,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,AAAC,CAAC"
}